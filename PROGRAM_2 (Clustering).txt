# Generate the following data points randomly
# 100 data points from normal distribution with mean=(0,0), sd=(1,1)
# 100 data points from normal distribution with mean=(6,0), sd=(1,4)
np.random.seed(0)
# Show the generated data points with each group in different color.
# Run Kmeans algorithm on the data points to show two clusters in different colors.
# Run Gaussina Mixture EM algorithm on the data points to show two clusters in different colors.
figure, ax = plt.subplots(1,3)
figure.set_size_inches(10,5)
x1= np.random.normal(0,1,100)
y1= np.random.normal(0,1,100)
ax[0].set_title("Original")
ax[0].scatter(x1,y1,alpha=0.5)
x2= np.random.normal(6,1,100)
y2= np.random.normal(0,4,100)
ax[0].scatter(x2,y2,alpha=0.5)
ax[0].axis('scaled')
#Kmeans algorithm
def Kmeans_k2(x):
    newC= np.random.randint(0,2,len(x))
    C=0
    while not np.array_equal(C,newC):
        C=newC
        c0= np.mean(x[C==0],axis=0)
        c1= np.mean(x[C==1],axis=0)

        d0= np.sum((x-c0)**2,axis=1)
        d1= np.sum((x-c1)**2,axis=1)

        newC= np.zeros(len(x),dtype='int8')
        newC[d1<d0]=1
    return C

x= np.hstack([x1,x2])
y= np.hstack([y1,y2])
data= np.vstack([x,y]).T 
C= Kmeans_k2(data)
ax[1].set_title("Kmeans")
ax[1].scatter(x,y,c=C,alpha=0.5)
ax[1].axis('scaled')
#Gaussian Mixture - EM Algorithm 
x= np.hstack([x1,x2])
y= np.hstack([y1,y2])
data= np.vstack([x,y]).T 
EM= GaussianMixture(n_components=2)
EM.fit(data)
cluster=EM.predict(data)
ax[2].set_title("GaussianMixture")
ax[2].scatter(x,y,c=cluster,alpha=0.5)
ax[2].axis('scaled')
